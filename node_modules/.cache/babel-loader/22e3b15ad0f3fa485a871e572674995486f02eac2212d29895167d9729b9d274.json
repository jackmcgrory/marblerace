{"ast":null,"code":"var _jsxFileName = \"/Users/Jack/marblerace/src/RiveRows/NumberRow.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useViewModelInstanceNumber } from \"@rive-app/react-webgl2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NumberRow({\n  viewModelInstance,\n  name\n}) {\n  _s();\n  const {\n    value: numberToDisplay,\n    setValue: setNumberValue\n  } = useViewModelInstanceNumber(name, viewModelInstance);\n  const [inputValue, setInputValue] = useState(numberToDisplay ? numberToDisplay : 0); // Track user input\n\n  const handleChange = event => {\n    setInputValue(event.target.value); // Update state as user types\n  };\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      const userNumber = parseFloat(inputValue); // Convert input to number\n      if (!isNaN(userNumber)) {\n        setNumberValue(userNumber); // Update view model\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"Number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: numberToDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: inputValue,\n        onChange: handleChange,\n        onKeyPress: handleKeyPress,\n        className: \"number-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n_s(NumberRow, \"j7jNkigXVjMD7ymvtt7ZeAvth6U=\", false, function () {\n  return [useViewModelInstanceNumber];\n});\n_c = NumberRow;\nvar _c;\n$RefreshReg$(_c, \"NumberRow\");","map":{"version":3,"names":["React","useState","useViewModelInstanceNumber","jsxDEV","_jsxDEV","NumberRow","viewModelInstance","name","_s","value","numberToDisplay","setValue","setNumberValue","inputValue","setInputValue","handleChange","event","target","handleKeyPress","key","userNumber","parseFloat","isNaN","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyPress","className","_c","$RefreshReg$"],"sources":["/Users/Jack/marblerace/src/RiveRows/NumberRow.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useViewModelInstanceNumber } from \"@rive-app/react-webgl2\";\n\nexport default function NumberRow({ viewModelInstance, name }) {\n    const { value: numberToDisplay, setValue: setNumberValue } = useViewModelInstanceNumber(name, viewModelInstance);\n    const [inputValue, setInputValue] = useState(numberToDisplay ? numberToDisplay : 0); // Track user input\n\n    const handleChange = (event) => {\n        setInputValue(event.target.value); // Update state as user types\n    };\n\n    const handleKeyPress = (event) => {\n        if (event.key === \"Enter\") {\n            const userNumber = parseFloat(inputValue); // Convert input to number\n            if (!isNaN(userNumber)) {\n                setNumberValue(userNumber); // Update view model\n            }\n        }\n    };\n\n    return (\n        <tr>\n            <td>{name}</td>\n            <td>Number</td>\n            <td>{numberToDisplay}</td>\n            <td>\n                <input\n                    type=\"number\"\n                    value={inputValue}\n                    onChange={handleChange}\n                    onKeyPress={handleKeyPress}\n                    className=\"number-input\"\n                />\n            </td>\n        </tr>\n    );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,0BAA0B,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,eAAe,SAASC,SAASA,CAAC;EAAEC,iBAAiB;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC3D,MAAM;IAAEC,KAAK,EAAEC,eAAe;IAAEC,QAAQ,EAAEC;EAAe,CAAC,GAAGV,0BAA0B,CAACK,IAAI,EAAED,iBAAiB,CAAC;EAChH,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAACS,eAAe,GAAGA,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;;EAErF,MAAMK,YAAY,GAAIC,KAAK,IAAK;IAC5BF,aAAa,CAACE,KAAK,CAACC,MAAM,CAACR,KAAK,CAAC,CAAC,CAAC;EACvC,CAAC;EAED,MAAMS,cAAc,GAAIF,KAAK,IAAK;IAC9B,IAAIA,KAAK,CAACG,GAAG,KAAK,OAAO,EAAE;MACvB,MAAMC,UAAU,GAAGC,UAAU,CAACR,UAAU,CAAC,CAAC,CAAC;MAC3C,IAAI,CAACS,KAAK,CAACF,UAAU,CAAC,EAAE;QACpBR,cAAc,CAACQ,UAAU,CAAC,CAAC,CAAC;MAChC;IACJ;EACJ,CAAC;EAED,oBACIhB,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EAAKhB;IAAI;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACfvB,OAAA;MAAAmB,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfvB,OAAA;MAAAmB,QAAA,EAAKb;IAAe;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC1BvB,OAAA;MAAAmB,QAAA,eACInB,OAAA;QACIwB,IAAI,EAAC,QAAQ;QACbnB,KAAK,EAAEI,UAAW;QAClBgB,QAAQ,EAAEd,YAAa;QACvBe,UAAU,EAAEZ,cAAe;QAC3Ba,SAAS,EAAC;MAAc;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEb;AAACnB,EAAA,CAjCuBH,SAAS;EAAA,QACgCH,0BAA0B;AAAA;AAAA8B,EAAA,GADnE3B,SAAS;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}