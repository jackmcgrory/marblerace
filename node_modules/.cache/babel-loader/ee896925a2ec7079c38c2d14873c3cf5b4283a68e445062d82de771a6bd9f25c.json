{"ast":null,"code":"import React,{useState}from\"react\";import{useViewModelInstanceNumber}from\"@rive-app/react-webgl2\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function NumberRow(_ref){let{viewModelInstance,name}=_ref;const{value:numberToDisplay,setValue:setNumberValue}=useViewModelInstanceNumber(name,viewModelInstance);const[inputValue,setInputValue]=useState(numberToDisplay?numberToDisplay:0);// Track user input\nconst handleChange=event=>{setInputValue(event.target.value);// Update state as user types\n};const handleKeyPress=event=>{if(event.key===\"Enter\"){const userNumber=parseFloat(inputValue);// Convert input to number\nif(!isNaN(userNumber)){setNumberValue(userNumber);// Update view model\n}}};return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:name}),/*#__PURE__*/_jsx(\"td\",{children:\"Number\"}),/*#__PURE__*/_jsx(\"td\",{children:numberToDisplay}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:inputValue,onChange:handleChange,onKeyPress:handleKeyPress,className:\"number-input\"})})]});}","map":{"version":3,"names":["React","useState","useViewModelInstanceNumber","jsx","_jsx","jsxs","_jsxs","NumberRow","_ref","viewModelInstance","name","value","numberToDisplay","setValue","setNumberValue","inputValue","setInputValue","handleChange","event","target","handleKeyPress","key","userNumber","parseFloat","isNaN","children","type","onChange","onKeyPress","className"],"sources":["/Users/Jack/marblerace/src/RiveRows/NumberRow.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useViewModelInstanceNumber } from \"@rive-app/react-webgl2\";\n\nexport default function NumberRow({ viewModelInstance, name }) {\n    const { value: numberToDisplay, setValue: setNumberValue } = useViewModelInstanceNumber(name, viewModelInstance);\n    const [inputValue, setInputValue] = useState(numberToDisplay ? numberToDisplay : 0); // Track user input\n\n    const handleChange = (event) => {\n        setInputValue(event.target.value); // Update state as user types\n    };\n\n    const handleKeyPress = (event) => {\n        if (event.key === \"Enter\") {\n            const userNumber = parseFloat(inputValue); // Convert input to number\n            if (!isNaN(userNumber)) {\n                setNumberValue(userNumber); // Update view model\n            }\n        }\n    };\n\n    return (\n        <tr>\n            <td>{name}</td>\n            <td>Number</td>\n            <td>{numberToDisplay}</td>\n            <td>\n                <input\n                    type=\"number\"\n                    value={inputValue}\n                    onChange={handleChange}\n                    onKeyPress={handleKeyPress}\n                    className=\"number-input\"\n                />\n            </td>\n        </tr>\n    );\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,0BAA0B,KAAQ,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEpE,cAAe,SAAS,CAAAC,SAASA,CAAAC,IAAA,CAA8B,IAA7B,CAAEC,iBAAiB,CAAEC,IAAK,CAAC,CAAAF,IAAA,CACzD,KAAM,CAAEG,KAAK,CAAEC,eAAe,CAAEC,QAAQ,CAAEC,cAAe,CAAC,CAAGZ,0BAA0B,CAACQ,IAAI,CAAED,iBAAiB,CAAC,CAChH,KAAM,CAACM,UAAU,CAAEC,aAAa,CAAC,CAAGf,QAAQ,CAACW,eAAe,CAAGA,eAAe,CAAG,CAAC,CAAC,CAAE;AAErF,KAAM,CAAAK,YAAY,CAAIC,KAAK,EAAK,CAC5BF,aAAa,CAACE,KAAK,CAACC,MAAM,CAACR,KAAK,CAAC,CAAE;AACvC,CAAC,CAED,KAAM,CAAAS,cAAc,CAAIF,KAAK,EAAK,CAC9B,GAAIA,KAAK,CAACG,GAAG,GAAK,OAAO,CAAE,CACvB,KAAM,CAAAC,UAAU,CAAGC,UAAU,CAACR,UAAU,CAAC,CAAE;AAC3C,GAAI,CAACS,KAAK,CAACF,UAAU,CAAC,CAAE,CACpBR,cAAc,CAACQ,UAAU,CAAC,CAAE;AAChC,CACJ,CACJ,CAAC,CAED,mBACIhB,KAAA,OAAAmB,QAAA,eACIrB,IAAA,OAAAqB,QAAA,CAAKf,IAAI,CAAK,CAAC,cACfN,IAAA,OAAAqB,QAAA,CAAI,QAAM,CAAI,CAAC,cACfrB,IAAA,OAAAqB,QAAA,CAAKb,eAAe,CAAK,CAAC,cAC1BR,IAAA,OAAAqB,QAAA,cACIrB,IAAA,UACIsB,IAAI,CAAC,QAAQ,CACbf,KAAK,CAAEI,UAAW,CAClBY,QAAQ,CAAEV,YAAa,CACvBW,UAAU,CAAER,cAAe,CAC3BS,SAAS,CAAC,cAAc,CAC3B,CAAC,CACF,CAAC,EACL,CAAC,CAEb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}